{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ENVIRONMENT,\n  EventType,\n  IReaction,\n  IConfiguration,\n  Overmind,\n} from 'overmind'\nimport { afterUpdate, onDestroy, onMount } from 'svelte'\nimport { ITrackCallback } from 'proxy-state-tree'\n\nconst IS_PRODUCTION = ENVIRONMENT === 'production'\n\nlet nextComponentId = 0\n\nexport function createMixin<Config extends IConfiguration>(\n  overmind: Overmind<Config>\n) {\n  const componentId = nextComponentId++\n  let nextComponentInstanceId = 0\n  let currentFlushId = 0\n\n  const subscribe = (listener) => {\n    // @ts-ignore\n    const tree = overmind.proxyStateTreeInstance.getTrackStateTreeWithProxifier()\n    const componentInstanceId = nextComponentInstanceId++\n    let isUpdating = false\n\n    const onUpdate: ITrackCallback = (_mutations, _paths, flushId) => {\n      tree.track(onUpdate)\n      currentFlushId = flushId\n      isUpdating = true\n      listener(tree.state)\n    }\n\n    tree.track(onUpdate)\n\n    listener(tree.state)\n\n    if (IS_PRODUCTION) {\n      afterUpdate(() => {\n        tree.stopTracking()\n        isUpdating = false\n      })\n    } else {\n      onMount(() => {\n        overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {\n          componentId,\n          componentInstanceId,\n          name: '',\n          paths: Array.from(tree.pathDependencies),\n        })\n      })\n\n      afterUpdate(() => {\n        tree.stopTracking()\n        if (isUpdating) {\n          overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {\n            componentId,\n            componentInstanceId,\n            name: '',\n            flushId: currentFlushId,\n            paths: Array.from(tree.pathDependencies),\n          })\n        }\n        isUpdating = false\n      })\n    }\n\n    return () => {\n      // @ts-ignore\n      overmind.proxyStateTreeInstance.disposeTree(tree)\n      overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {\n        componentId,\n        componentInstanceId: componentInstanceId,\n        name: '',\n      })\n    }\n  }\n\n  const reaction: IReaction<Config> = (...args) => {\n    const dispose = overmind.reaction(...args)\n\n    onDestroy(() => {\n      dispose()\n    })\n\n    return dispose\n  }\n\n  return {\n    state: { ...overmind.state, subscribe },\n    actions: overmind.actions,\n    effects: overmind.effects,\n    addMutationListener: overmind.addMutationListener,\n    reaction: reaction,\n  }\n}\n"]}